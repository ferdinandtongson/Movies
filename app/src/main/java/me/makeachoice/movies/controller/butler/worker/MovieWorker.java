package me.makeachoice.movies.controller.butler.worker;

import android.app.ProgressDialog;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import me.makeachoice.movies.controller.butler.MyButler;
import me.makeachoice.movies.model.response.tmdb.MovieModel;
import me.makeachoice.movies.model.response.tmdb.MoviesResponse;

/**************************************************************************************************/
/**
 * MovieWorker - handles The Movie DB Http api request, processes the JSON response generated by
 * the request for consumption and passes the processed data up to the Butler.
 *
 * Variable from MyWorker:
 *      mButler;
 *
 * Methods from MyWorker:
 *      Boolean doInBackground(String... params)
 *      void onProgressUpdate(Integer... values)
 *      Boolean onPostExecute(Boolean result)
 *
 * Permissions needed in AndroidManifest file:
 *      <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 *      <uses-permission android:name="android.permission.INTERNET" />
 */
public class MovieWorker extends MyWorker{

    private ProgressDialog mDialog;
    public MovieWorker(MyButler butler){
        //Butler in charge of MovieWorker
        mButler = butler;
        mDialog = new ProgressDialog(mButler.getActivityContext());
    }

/**************************************************************************************************/
/**
 * boolean hasConnectivity(Context) - check to see if the phone has network connection
 * @return boolean - true if we have network connect, false if not
 *
 * NOTE - need to have <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 *
 *
 */
    public boolean hasConnectivity(Context ctx){
        //get Connectivity Manger
        ConnectivityManager connMgr = (ConnectivityManager)
                ctx.getSystemService(Context.CONNECTIVITY_SERVICE);

        //get access to network information from phone
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();

        //check if we have connection
        if(networkInfo != null && networkInfo.isConnected()) {
            return true;
        }
        else{
            return false;
        }
    }

    public ArrayList<MovieModel> getMovies(){
        return mMovies;
    }

/**************************************************************************************************/

    @Override
    protected void onPreExecute(){
        mDialog.setMessage("Doing something, please wait.");
        mDialog.show();
    }

/**
 * Boolean doInBackground(String... params) is called after the instantiated Worker class calls
 * XWorker.execute(String...). doInBackground runs on a background thread but is only meant for
 * short processing work, a couple seconds or so.
 *
 * Communicates with The Movie DB api, receives a JSON reponse and processes the response for
 * consumption by the Butler
 * @param params - a dynamic array of string varaible used to construct the url api call
 * @return - returns boolean value to onPostExecute
 */
    protected Boolean doInBackground(String... params){

        //url used
        String api_call = "";
        int count = params.length;

        //construct api call url
        for(int i = 0; i < count; i++){
            api_call = api_call + params[i];
        }

        //result of url call
        Boolean result;
        try {
            //api_call = "http://api.themoviedb.org/3/genre/movie/list?api_key=ec1c9e77ea098584409c2b2309c4f287";
            //create url object with string variable
            URL url = new URL(api_call);
            //open http connection
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();

            //receive input stream from url
            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());
            //create bufferedReader
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));
            //create a string reader to read buffer
            StringBuilder builder = new StringBuilder();


            //string variable to read each line in the buffer
            String inputString;
            //loop through all lines in buffer
            while ((inputString = bufferedReader.readLine()) != null) {
                //append lines into one string
                builder.append(inputString);
            }

            //process JSON response
            result = processJSON(builder);


            //disconnect url connection
            urlConnection.disconnect();
        }
        catch (IOException e) {
            //IO exception, url call failed
            e.printStackTrace();
            return false;
        }

        return result;
    }

/**
 * void onProgressUpdate(Integer...) - runs on UI thread, can post updates to UI
 * @param values - a dynamic array of integers
 */
    protected void onProgressUpdate(Integer... values){
        //does nothing
    }

    /**
 * void onPostExecute(Boolean) - runs on UI thread, called when doInBackground is completed
 * @param result - boolean value on whether the background task completed successfully or not
 */
    protected void onPostExecute(Boolean result){
        //TODO - need to confirm success of background task
        if(mDialog.isShowing()){
            mDialog.dismiss();
        }

        mButler.workComplete(result);
    }

    @Override
    protected void onCancelled(){
        if(mDialog.isShowing()){
            mDialog.dismiss();
        }
        //mButler.workComplete(false);
    }

/**************************************************************************************************/

/**************************************************************************************************/
/**
 * JSON response variables received from TheMovie DB api call.
 * {
 *     "page":X
 *     "result":[{....}],
 * }
 */

/**************************************************************************************************/

/**************************************************************************************************/

    ArrayList<MovieModel> mMovies;
    private Boolean processJSON(StringBuilder builder){
        mMovies = new ArrayList<>();
        try{
            //convert string to JSON Object
            JSONObject topLevel = new JSONObject(builder.toString());

            Gson gson = new GsonBuilder().create();

            MoviesResponse response = gson.fromJson(topLevel.toString(), MoviesResponse.class);

            mMovies = response.movies;
        }
        catch(JSONException e){
            Log.d("Movies", "***** JSONException - processJSON *****");
            e.printStackTrace();
            return false;
        }
        return true;

    }


}
