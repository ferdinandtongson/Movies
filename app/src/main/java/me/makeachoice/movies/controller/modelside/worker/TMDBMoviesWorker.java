package me.makeachoice.movies.controller.modelside.worker;

import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import me.makeachoice.movies.model.response.tmdb.MovieModel;
import me.makeachoice.movies.model.response.tmdb.MoviesResponse;

/**************************************************************************************************/
/**
 * TMDBMoviesWorker - handles api movie list request to TheMovieDB, processes the JSON response
 * generated by the request and passes the processed data up to the Bridge.
 *
 * Methods from MyWorker:
 *      Boolean doInBackground(String... params)
 *      Boolean onPostExecute(Boolean result)
 *
 * Permissions needed in AndroidManifest file:
 *      <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 *      <uses-permission android:name="android.permission.INTERNET" />
 */
public class TMDBMoviesWorker extends MyWorker{

/**************************************************************************************************/
/**
 * Class Variables:
 *      ArrayList<MovieModel> mMovies - list of movie model data received from the API call
 *      Bridge mBridge - Bridge communication interface
 */
/**************************************************************************************************/

    //mMovies - list of movie model data received from the API call
    ArrayList<MovieModel> mMovies;

    //mBridge - Bridge communication interface
    Bridge mBridge;

    //bridge communication interface
    public interface Bridge{
        //notify Bridge that the list of movie data has been downloaded
        void moviesDownloaded(ArrayList<MovieModel> movies);
    }

/**************************************************************************************************/

/**************************************************************************************************/
/**
 * TMDBMoviesWorker - constructor
 * @param bridge - class implementing the Bridge interface
 */
    public TMDBMoviesWorker(Bridge bridge){
        //Butler making the API request
        mBridge = bridge;

        //initialize movie model list buffer
        mMovies = new ArrayList<>();
    }

/**************************************************************************************************/

/**************************************************************************************************/
/**
 * Implemented Abstract Class methods
 *      Boolean doInBackground(String...) - method from MyWorker inherited from AsyncTask; runs on
 *          a background Thread. Makes an API call to get list of Movie data
 *      void onPostExecute(Boolean) - method from MyWorker inherited from AsyncTask; runs on UI
 *          Thread. Informs the Butler class that the work has completed.
 */
/**************************************************************************************************/
/**
 * Boolean doInBackground(String... params) is called after the instantiated Worker class calls
 * XWorker.execute(String...). doInBackground runs on a background thread but is only meant for
 * short processing work, a couple seconds or so.
 *
 * Communicates with TheMovieDB api, receives a JSON response and processes the response for
 * consumption by the Bridge
 * @param params - a dynamic array of string variable used to construct the url api call
 * @return - returns boolean value to onPostExecute
 */
    protected Boolean doInBackground(String... params){

        //api call
        String api_call = "";

        //get number of string parameters passed
        int count = params.length;

        //construct api call url
        for(int i = 0; i < count; i++){
            //combine string parameters into one string
            api_call = api_call + params[i];
        }

        //result of url call
        Boolean result;
        try {
            //create url object with string variable
            URL url = new URL(api_call);
            //open http connection
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();

            //receive input stream from url
            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());
            //create bufferedReader
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));
            //create a string reader to read buffer
            StringBuilder builder = new StringBuilder();


            //string variable to read each line in the buffer
            String inputString;
            //loop through all lines in buffer
            while ((inputString = bufferedReader.readLine()) != null) {
                //append lines into one string
                builder.append(inputString);
            }

            //process JSON response
            result = processJSON(builder);


            //disconnect url connection
            urlConnection.disconnect();
        }
        catch (IOException e) {
            //IO exception, url call failed
            e.printStackTrace();
            return false;
        }

        return result;
    }

/**
 * void onPostExecute(Boolean) - runs on UI thread, called when doInBackground is completed
 * @param result - boolean value on whether the background task completed successfully or not
 */
    protected void onPostExecute(Boolean result){
        //notify Bridge that the list of movies have been downloaded
        mBridge.moviesDownloaded(mMovies);
    }

/**************************************************************************************************/

/**************************************************************************************************/
/**
 * Class methods
 *      Boolean processJSON(StringBuilder) - process raw JSON data to MovieModel
 */
/**************************************************************************************************/
/**
 * Boolean processJSON(StringBuilder) - process raw JSON data to a list of MovieModel data
 * @param builder - raw JSON data
 * @return - result flag if JSON process was successful or not
 */
    private Boolean processJSON(StringBuilder builder){
        mMovies = new ArrayList<>();
        try{
            //convert string to JSON Object
            JSONObject topLevel = new JSONObject(builder.toString());

            //create Gson object
            Gson gson = new GsonBuilder().create();

            //convert raw JSON data to a list of MovieModel data
            MoviesResponse response = gson.fromJson(topLevel.toString(), MoviesResponse.class);

            //get list of MovieModel data from response
            mMovies = response.movies;
        }
        catch(JSONException e){
            Log.d("Movies", "***** JSONException - processJSON *****");
            e.printStackTrace();
            return false;
        }
        return true;

    }

/**************************************************************************************************/


}
